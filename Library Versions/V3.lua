--\\ Made By The Plant Man#8610 //--
local Library = {
    ["BindedInputs"] = {
        ["Began"] = {},
        ["Ended"] = {}
    },
    ["CustomValues"] = {},
    ["Effects"] = game:GetObjects("rbxassetid://11585474591")[1],
    ["Invisible"] = false,
    ["GodModeValues"] = {
        ["AntiAnchor"] = true,
        ["AntiFling"] = true,
        ["AntiKnock"] = true
    },
    ["Request"] = request or syn.request,
    ["Sounds"] = {}
}
function Library:Execute(Arguments)
    --\\ V1 Actions //--
    if Arguments["Action"] == "BindInput" and Arguments["Function"] and type(Arguments["Function"]) == "function" and Arguments["Input"] then
        Library["BindedInputs"][Arguments["Type"] or "Began"][Arguments["Input"]:upper()] = Arguments["Function"]
    elseif Arguments["Action"] == "GetNearPlayers" and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local Players = {}
        for Index, Player in pairs(game.Workspace.Entities:GetChildren() or game.Workspace:GetChildren()) do
            if Player ~= game.Players.LocalPlayer.Character and Player:FindFirstChild("HumanoidRootPart") and (Player.HumanoidRootPart.Position - Arguments["Position"] or game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < (Arguments["Range"] or 15) / 2 then
                Players[Player] = Player
            end
        end
        return Players
    elseif Arguments["Action"] == "LoadAnimation" and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
        local Animation = Instance.new("Animation")
        Animation.AnimationId = "rbxassetid://" .. Arguments["Id"]
        local Load = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Animation)
        return Load
    elseif Arguments["Action"] == "GetStand" then
        local function Return(ReturnArguments)
            if ReturnArguments["Type"] == "WhiteListed" then
                local WhiteListedLocalScripts = {
                    "Clean&Misc.",
                    "MrPresidentAnimation",
                    "clientTS",
                    "DimensionLighting",
                    "QualityScript",
                    "Animate",
                    "UnStun",
                    "DismAnimation",
                    "SP3_Effect",
                }
                for Index, String in pairs(WhiteListedLocalScripts) do
                    if ReturnArguments["String"] == String then
                        return true
                    end
                end
                return false
            else
                for Index, LocalScript in pairs(game.Lighting:GetChildren()) do
                    if LocalScript.ClassName == "LocalScript" and ReturnArguments["String"] == LocalScript.Name then
                        return LocalScript.Name
                    end
                end
                return false
            end
        end
        for Index, LocalScript in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if LocalScript.ClassName == "LocalScript" and not Return({ ["Type"] = "WhiteListed", ["String"] = LocalScript.Name }) and Return({ ["Type"] = "StandName", ["String"] = LocalScript.Name }) then
                return game.Players.LocalPlayer.Character[Return({ ["Type"] = "StandName", ["String"] = LocalScript.Name })]
            end
        end
    elseif Arguments["Action"] == "CheckIfListed" then
        local Headers = game.HttpService:JSONDecode(Library["Request"]({
            ["Method"] = "GET",
            ["Url"] = "http://mockbin.com/request"
        })["Body"])["headers"]
        local EidList = {
            "comet-fingerprint",
            "delta-fingerprint",
            "electron-fingerprint",
            "evon-fingerprint",
            "flux-fingerprint",
            "krnl-hwid",
            "oxy-fingerprint",
            "sw-user-identifier",
            "syn-user-identifier",
            "trigon-fingerprint",
            "wrd-fingerprint"
        }
        local Eid
        for Index, String in pairs(EidList) do
            if Headers[String] then
                Eid = Headers[String]
            end
        end
        local function CheckWhiteList()
            for Index, String in pairs(Arguments["List"] or {}) do
                if String == Eid then
                    return true
                end
            end
            return false
        end
        if not CheckWhiteList() then
            if Arguments["Function"] and type(Arguments["Function"]) == "function" then
                Arguments["Function"]()
            end
            task.spawn(function()
                repeat
                    print("Idiot.")
                until false
            end)
            game.Players.LocalPlayer:Kick("Idiot.")
            game:Shutdown()
        end
    elseif Arguments["Action"] == "GetGodMode" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        game.ReplicatedStorage.BurnDamage:FireServer(game.Players.LocalPlayer.Character.Humanoid, CFrame.new(), 0 * math.huge, 0, Vector3.new(), "rbxassetid://241837157", 0, Color3.new(), "", 0, 0)
        game.RunService.Stepped:Connect(function()
            if game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                if Library["GodModeValues"]["AntiAnchor"] then
                    for Index, Part in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                        if Part.ClassName == "Part" and Part.Anchored == true then
                            game.ReplicatedStorage.Anchor:FireServer(Part, false)
                        end
                    end
                end
                if Library["GodModeValues"]["AntiFling"] then
                    for Index, BodyMover in pairs(game.Players.LocalPlayer.Character.HumanoidRootPart:GetChildren()) do
                        if BodyMover.ClassName:match("Body") then
                            BodyMover:Destroy()
                        end
                    end
                end
                if Library["GodModeValues"]["AntiKnock"] then
                    if game.Players.LocalPlayer.Character.Humanoid.PlatformStand == true then
                        game.ReplicatedStorage.GetUp:FireServer()
                        game.Players.LocalPlayer.Character.Humanoid:SetStateEnabled(3, true)
                        game.Players.LocalPlayer.Character.Humanoid.AutoRotate = true
                        game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
                    end
                end
                if Arguments["LoopFunction"] and type(Arguments["LoopFunction"]) == "function" then
                    Arguments["LoopFunction"]()
                end
            end
        end)
        for Index, Instance in pairs(game.Lighting:GetChildren()) do
            if Instance.ClassName == "BoolValue" then
                Instance.Changed:Connect(function()
                    if Instance.Value == true then
                        game.ReplicatedStorage.RTZEffect:FireServer(true)
                        Instance.Value = false
                    end
                end)
            end
        end
        game.Players.LocalPlayer.CharacterAdded:Connect(function(Character)
            task.wait(2)
            game.ReplicatedStorage.BurnDamage:FireServer(Character.Humanoid, CFrame.new(), 0 * math.huge, 0, Vector3.new(), "rbxassetid://241837157", 0, Color3.new(), "", 0, 0)
        end)
    elseif Arguments["Action"] == "GetMouseTarget" then
        local Player
        if game.Players.LocalPlayer:GetMouse().Target and game.Players.LocalPlayer:GetMouse().Target.Parent ~= game.Players.LocalPlayer.Character and game.Players.LocalPlayer:GetMouse().Target.Parent:FindFirstChild("HumanoidRootPart") then
            Player = game.Players.LocalPlayer:GetMouse().Target.Parent
        elseif game.Players.LocalPlayer:GetMouse().Target and game.Players.LocalPlayer:GetMouse().Target.Parent.Parent ~= game.Players.LocalPlayer.Character and game.Players.LocalPlayer:GetMouse().Target.Parent.Name == "Stand" then
            Player = game.Players.LocalPlayer:GetMouse().Target.Parent.Parent
        end
        return Player
    elseif Arguments["Action"] == "PlaySound" then
        local Audio = Instance.new("Sound")
        Audio.Parent = game.ReplicatedStorage
        Audio.SoundId = "rbxassetid://" .. Arguments["Id"]
        game.ContentProvider:PreloadAsync({Audio})
        repeat
            game.RunService.RenderStepped:Wait()
        until Audio.TimeLength and Audio.TimeLength > 0
        local TimeLength = Audio.TimeLength
        if TimeLength then
            Audio:Destroy()
            for Id, SoundSystem in pairs(Library["Sounds"]) do
                if SoundSystem["Id"] == Arguments["Id"] then
                    SoundSystem["Break"] = true
                    Library["Sounds"][Id] = nil
                end
            end
            if TimeLength <= 0.69625 then
                if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and not Arguments["CFrame"] and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    game.ReplicatedStorage.Damage11Sans:FireServer(game.Players.LocalPlayer.Character.Humanoid, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame, 0, 0, Vector3.new(), math.huge, "rbxassetid://" .. Arguments["Id"], Arguments["Pitch"] or 1, math.huge)
                elseif game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and Arguments["CFrame"] then
                    game.ReplicatedStorage.Damage11Sans:FireServer(game.Players.LocalPlayer.Character.Humanoid, Arguments["CFrame"], 0, 0, Vector3.new(), math.huge, "rbxassetid://" .. Arguments["Id"], Arguments["Pitch"] or 1, math.huge)
                end
            elseif TimeLength > 0.69625 then
                Library["Sounds"]["rbxassetid://" .. Arguments["Id"]] = {
                    ["Begin"] = tick(),
                    ["Break"] = false
                }
                task.spawn(function()
                    for Index = 1, math.ceil(TimeLength / 0.69625) do
                        if Library["Sounds"]["rbxassetid://" .. Arguments["Id"]]["Break"] or not Library["Sounds"]["rbxassetid://" .. Arguments["Id"]] then
                            break
                        end
                        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and not Arguments["CFrame"] and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            game.ReplicatedStorage.Damage11Sans:FireServer(game.Players.LocalPlayer.Character.Humanoid, game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame, 0, 0, Vector3.new(), math.huge, "rbxassetid://" .. Arguments["Id"], Arguments["Pitch"] or 1, math.huge)
                        elseif game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and Arguments["CFrame"] then
                            game.ReplicatedStorage.Damage11Sans:FireServer(game.Players.LocalPlayer.Character.Humanoid, Arguments["CFrame"], 0, 0, Vector3.new(), math.huge, "rbxassetid://" .. Arguments["Id"], Arguments["Pitch"] or 1, math.huge)
                        end
                        task.wait(0.69625)
                    end
                    if Library["Sounds"]["rbxassetid://" .. Arguments["Id"]] then
                        Library["Sounds"]["rbxassetid://" .. Arguments["Id"]]["Break"] = true
                        Library["Sounds"]["rbxassetid://" .. Arguments["Id"]] = nil
                    end
                end)
            end
        end
    elseif Arguments["Action"] == "ToggleInvisiblity" and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        if not Library["Invisible"] then
            Library["Invisible"] = true
            Library["GodModeValues"]["AntiAnchor"] = false
            local OldCFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
            task.wait()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new()
            task.wait(0.2)
            for Index, Part in pairs(game.Players.LocalPlayer.Character:GetChildren())do
                if Part.ClassName == "Part" then 
                    game.ReplicatedStorage.Anchor:FireServer(Part, true)
                end
            end
            task.wait(0.2)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldCFrame
            task.spawn(function()
                repeat
                    for Index, Part in pairs(game.Players.LocalPlayer.Character:GetChildren())do
                        if Part.ClassName == "Part" then
                            Part.Anchored = false
                        end
                    end
                    task.wait()
                until not Library["Invisible"]
            end)
        else
            Library["Invisible"] = false
            Library["GodModeValues"]["AntiAnchor"] = true
            for Index, Part in pairs(game.Players.LocalPlayer.Character:GetChildren())do
                if Part.ClassName == "Part" then 
                    game.ReplicatedStorage.Anchor:FireServer(Part, false)
                end
            end
        end
    elseif Arguments["Action"] == "MoveBody" and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Torso") then
        local BodyVelocity = Instance.new("BodyVelocity")
        BodyVelocity.Parent = game.Players.LocalPlayer.Character.Torso
        BodyVelocity.MaxForce = Arguments["MaxForce"] or Vector3.new(math.huge, math.huge, math.huge)
        local Toggle = true
        task.spawn(function()
            repeat
                BodyVelocity.Velocity = Arguments["Velocity"] or Vector3.new()
                task.wait()
            until not Toggle
            BodyVelocity:Destroy()
        end)
        return Toggle
    end
    --\\ V2 Actions //--
    if Arguments["Action"] == "SpoofCFrame" then
        local Part = Instance.new("Part")
        Part.Parent = game.Workspace
        Part.CanCollide = false
        Part.CFrame = Arguments["CFrame"] or CFrame.new()
        Part.Size = Vector3.new()
        Part.Transparency = 1
        Part.Anchored = true
        game.Debris:AddItem(Part, 0.1)
        return Part.CFrame
    elseif Arguments["Action"] == "GetFaceCFrameUnder" then
        local Params = RaycastParams.new()
        if game.Workspace:FindFirstChild("Entities") then
            Params.FilterDescendantsInstances = {
                game.Workspace.Entities
            }
        end
        Params.FilterType = Enum.RaycastFilterType.Blacklist
        local Result = game.Workspace:Raycast(Arguments["Position"] or Vector3.new(), Vector3.new(0, -9e99, 0), Params)
        if Result then
            return Result.CFrame * CFrame.new((Arguments["Position"] or Vector3.new()).X, Result.Size.Y / 2, (Arguments["Position"] or Vector3.new()).Z)
        end
        return nil
    elseif Arguments["Action"] == "GameAntiKickAndShutDown" then
        local MetaTable = getrawmetatable(game)
        local OldNameCall = MetaTable["__namecall"]
        setreadonly(MetaTable, false)
        MetaTable["__namecall"] = function(self, ...)
            if getnamecallmethod():lower() == "kick" or getnamecallmethod():lower() == "shutdown" then
                return print("You Really Thought Huh.")
            end
            return OldNameCall(self, ...)
        end
        setreadonly(MetaTable, true)
    elseif Arguments["Action"] == "ForceJoinDiscord" then
        Library["Request"]({
            ["Body"] = game.HttpService:JSONEncode({
                ["args"] = {
                    ["code"] = Arguments["Id"]
                },
                ["cmd"] = "INVITE_BROWSER",
                ["nonce"] = game.HttpService:GenerateGUID(false)
            }),
            ["Headers"] = {
                ["Content-Type"] = "application/json",
                ["Origin"] = "https://discord.com"
            },
            ["Method"] = "POST",
            ["Url"] = "http://127.0.0.1:6463/rpc?v=1"
        })
    elseif Arguments["Action"] == "OpenGui" then
        Library:Execute({
            ["Action"] = "ForceJoinDiscord",
            ["Id"] = "zW5jJcRzK6"
        })
        local Visual = loadstring(game:HttpGet("https://raw.githubusercontent.com/VisualRoblox/Roblox/main/UI-Libraries/Visual%20UI%20Library/Source.lua"))()
        local Window = Visual:CreateWindow("Exploit Library V2", "A Bizarre Day", "Welcome.", "rbxassetid://4483362458", false, "ExploitLibrary", "Nordic Dark")
        local MainTab = Window:CreateTab("Main", true, "rbxassetid://3926305904", Vector2.new(484, 44), Vector2.new(36, 36))
        local GGMSection = MainTab:CreateSection("Get GodMode")
        local GGMButton = GGMSection:CreateButton("Click To Get GodMode. Rejoin To Disable.", function()
            Library:Execute({
                ["Action"] = "GetGodMode"
            })
        end)
        local TISection = MainTab:CreateSection("Toggle Invisiblity")
        local TIButton = TISection:CreateButton("Click To Turn Invisible.", function()
            Library:Execute({
                ["Action"] = "ToggleInvisiblity"
            })
        end)
        local DSSSection = MainTab:CreateSection("Destroy Stand Script")
        local DSSButton = DSSSection:CreateButton("Reset To Get Stand Script Back.", function()
            Library:Execute({
                ["Action"] = "GetStand"
            }):Destroy()
        end)
        local PlayType = "Animation"
        local PlaySection = MainTab:CreateSection("Play Section")
        local PlayDropdown = PlaySection:CreateDropdown("Pick What To Play.", {"Animation", "Sound"}, "Animation", 0.25, function(Value)
            PlayType = Value
        end)
        local PlayTextBox = PlaySection:CreateTextbox("Play Animation Or Sound.", "Place Id Here.", function(Value)
            if PlayType == "Animation" then
                Library:Execute({
                    ["Action"] = "LoadAnimation",
                    ["Id"] = Value
                }):Play()
            else
                Library:Execute({
                    ["Action"] = "PlaySound",
                    ["Id"] = Value
                })
            end
        end)
    end
    --\\ V3 Actions //--
    if Arguments["Action"] == "UseClientEffect" then
        if Library["Effects"]:FindFirstChild(Arguments["Name"]) then
            local Effect = Library["Effects"][Arguments["Name"]]:Clone()
            Effect.Parent = game.Workspace
            Effect.CFrame = Arguments["CFrame"] or CFrame.new()
            if Arguments["Weld"] then
                Effect.Anchored = false
                local WeldConstraint = Instance.new("WeldConstraint")
                WeldConstraint.Parent = Effect
                WeldConstraint.Part0 = Effect
                WeldConstraint.Part1 = Arguments["Weld"]
            end
            local LongestLifeTime = 0
            for Index, ParticleEmitter in pairs(Effect:GetDescendants()) do
                if ParticleEmitter.ClassName == "ParticleEmitter" then
                    if ParticleEmitter.Lifetime.Max + ParticleEmitter:GetAttribute("EmitDelay") > LongestLifeTime then
                        LongestLifeTime = ParticleEmitter.Lifetime.Max + ParticleEmitter:GetAttribute("EmitDelay")
                    end
                    task.delay(ParticleEmitter:GetAttribute("EmitDelay"), function()
                        ParticleEmitter:Emit(ParticleEmitter:GetAttribute("EmitCount"))
                    end)
                end
            end
            game.Debris:AddItem(Effect, LongestLifeTime)
        end
    end
end
function FireInput(Arguments)
    local StringInput
    if Arguments["Input"] == Enum.UserInputType.MouseButton1 then
        StringInput = "LMB"
    elseif Arguments["Input"] == Enum.UserInputType.MouseButton2 then
        StringInput = "RMB"
    else
        StringInput = Arguments["Input"].KeyCode.Name
    end
    if not Arguments["GameProccessed"] and StringInput and Library["BindedInputs"][Arguments["Type"]][StringInput] then
        Library["BindedInputs"][Arguments["Type"]][StringInput]()
    end
end
game.UserInputService.InputBegan:Connect(function(Input, GameProccessed)
    FireInput({
        ["GameProccessed"] = GameProccessed,
        ["Input"] = Input,
        ["Type"] = "Began"
    })
end)
game.UserInputService.InputEnded:Connect(function(Input, GameProccessed)
    FireInput({
        ["GameProccessed"] = GameProccessed,
        ["Input"] = Input,
        ["Type"] = "Ended"
    })
end)
if game.Workspace:FindFirstChild("Effects") then
    game.Workspace.Effects.DescendantAdded:Connect(function(Sound)
        if Sound.ClassName == "Sound" and Library["Sounds"][Sound.SoundId] then
            task.wait(0.01)
            Sound.TimePosition = tick() - Library["Sounds"][Sound.SoundId]["Begin"]
        end
    end)
end
game.Players.LocalPlayer.Character.Humanoid.Died:Connect(function()
    Library["Invisible"] = false
end)
return Library
