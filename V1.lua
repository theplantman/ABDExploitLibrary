--\\ Made By The Plant Man#8610 //--
local Library = {
    ["BindedInputs"] = {
        ["Began"] = {},
        ["Ended"] = {}
    }
}
function Library:Execute(Arguments)
    if Arguments["Action"] == "BindInput" and Arguments["Function"] and type(Arguments["Function"]) == "function" and Arguments["Input"] then
        Library["BindedInputs"][Arguments["Type"] or "Began"][Arguments["Input"]] = Arguments["Function"]
    elseif Arguments["Action"] == "GetNearPlayers" and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local Players = {}
        for Index, Player in pairs(game.Workspace.Entities:GetChildren()) do
            if Player ~= game.Players.LocalPlayer.Character and Player:FindFirstChild("HumanoidRootPart") and (Player.HumanoidRootPart.Position - Arguments["Position"] or game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < (Arguments["Range"] or 15) / 2 then
                Players[Player] = Player
            end
        end
        return Players
    elseif Arguments["Action"] == "LoadAnimation" and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
        local Animation = Instance.new("Animation")
        Animation.AnimationId = "rbxassetid://" .. Arguments["Id"]
        local Load = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Animation)
        return Load
    elseif Arguments["Action"] == "GetStand" then
        local function Return(ReturnArguments)
            if ReturnArguments["Type"] == "WhiteListed" then
                local WhiteListedLocalScripts = {
                    "Clean&Misc.",
                    "MrPresidentAnimation",
                    "clientTS",
                    "DimensionLighting",
                    "QualityScript",
                    "Animate",
                    "UnStun",
                    "DismAnimation",
                    "SP3_Effect",
                }
                for Index, String in pairs(WhiteListedLocalScripts) do
                    if ReturnArguments["String"] == String then
                        return true
                    end
                end
                return false
            else
                for Index, LocalScript in pairs(game.Lighting:GetChildren()) do
                    if LocalScript.ClassName == "LocalScript" and ReturnArguments["String"] == LocalScript.Name then
                        return LocalScript.Name
                    end
                end
                return false
            end
        end
        for Index, LocalScript in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if LocalScript.ClassName == "LocalScript" and not Return({ ["Type"] = "WhiteListed", ["String"] = LocalScript.Name }) and Return({ ["Type"] = "StandName", ["String"] = LocalScript.Name }) then
                return game.Players.LocalPlayer.Character[Return({ ["Type"] = "StandName", ["String"] = LocalScript.Name })]
            end
        end
    elseif Arguments["Action"] == "CreateWhiteListSystem" then
        local Request = request or syn.request
        local Headers = game.HttpService:JSONDecode(Request({
            ["Method"] = "GET",
            ["Url"] = "http://mockbin.com/request"
        })["Body"])["headers"]
        local EidList = {
            "comet-fingerprint",
            "delta-fingerprint",
            "electron-fingerprint",
            "evon-fingerprint",
            "flux-fingerprint",
            "krnl-hwid",
            "oxy-fingerprint",
            "sw-user-identifier",
            "syn-user-identifier",
            "trigon-fingerprint",
            "wrd-fingerprint"
        }
        local Eid
        for Index, String in pairs(EidList) do
            if Headers[String] then
                Eid = Headers[String]
            end
        end
        local function CheckWhiteList()
            for Index, String in pairs(Arguments["List"] or {}) do
                if String == Eid then
                    return true
                end
            end
            return false
        end
        if not CheckWhiteList() then
            if Arguments["Function"] then
                Arguments["Function"]()
            end
            task.spawn(function()
                repeat
                    print("Idiot.")
                until false
            end)
            game.Players.LocalPlayer:Kick("Idiot.")
        end
    end
end
function InputFunction(Arguments)
    if not Arguments["GameProccessed"] then
        local StringInput
        if Arguments["Input"] == Enum.UserInputType.MouseButton1 then
            StringInput = "LMB"
        elseif Arguments["Input"] == Enum.UserInputType.MouseButton2 then
            StringInput = "RMB"
        else
            StringInput = Arguments["Input"].KeyCode.Name
        end
        if StringInput and Library["BindedInputs"][Arguments["Type"]][StringInput] then
            Library["BindedInputs"][Arguments["Type"]][StringInput]()
        end
    end
end
game.UserInputService.InputBegan:Connect(function(Input, GameProccessed)
    InputFunction({
        ["GameProccessed"] = GameProccessed,
        ["Input"] = Input,
        ["Type"] = "Began"
    })
end)
game.UserInputService.InputEnded:Connect(function(Input, GameProccessed)
    InputFunction({
        ["GameProccessed"] = GameProccessed,
        ["Input"] = Input,
        ["Type"] = "Ended"
    })
end)
return Library
