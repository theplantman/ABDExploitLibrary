--\\ Made By The Plant Man#8610 //--
local Library = {
    ["BindedInputs"] = {
        ["Began"] = {},
        ["Ended"] = {}
    },
    ["Invisible"] = false,
    ["Sounds"] = {}
}
function Library:Execute(Arguments)
    if Arguments["Action"] == "BindInput" and Arguments["Function"] and type(Arguments["Function"]) == "function" and Arguments["Input"] then
        Library["BindedInputs"][Arguments["Type"] or "Began"][Arguments["Input"]:upper()] = Arguments["Function"]
    elseif Arguments["Action"] == "GetNearPlayers" and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local Players = {}
        for Index, Player in pairs(game.Workspace.Entities:GetChildren()) do
            if Player ~= game.Players.LocalPlayer.Character and Player:FindFirstChild("HumanoidRootPart") and (Player.HumanoidRootPart.Position - Arguments["Position"] or game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < (Arguments["Range"] or 15) / 2 then
                Players[Player] = Player
            end
        end
        return Players
    elseif Arguments["Action"] == "LoadAnimation" and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
        local Animation = Instance.new("Animation")
        Animation.AnimationId = "rbxassetid://" .. Arguments["Id"]
        local Load = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Animation)
        return Load
    elseif Arguments["Action"] == "GetStand" then
        local function Return(ReturnArguments)
            if ReturnArguments["Type"] == "WhiteListed" then
                local WhiteListedLocalScripts = {
                    "Clean&Misc.",
                    "MrPresidentAnimation",
                    "clientTS",
                    "DimensionLighting",
                    "QualityScript",
                    "Animate",
                    "UnStun",
                    "DismAnimation",
                    "SP3_Effect",
                }
                for Index, String in pairs(WhiteListedLocalScripts) do
                    if ReturnArguments["String"] == String then
                        return true
                    end
                end
                return false
            else
                for Index, LocalScript in pairs(game.Lighting:GetChildren()) do
                    if LocalScript.ClassName == "LocalScript" and ReturnArguments["String"] == LocalScript.Name then
                        return LocalScript.Name
                    end
                end
                return false
            end
        end
        for Index, LocalScript in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if LocalScript.ClassName == "LocalScript" and not Return({ ["Type"] = "WhiteListed", ["String"] = LocalScript.Name }) and Return({ ["Type"] = "StandName", ["String"] = LocalScript.Name }) then
                return game.Players.LocalPlayer.Character[Return({ ["Type"] = "StandName", ["String"] = LocalScript.Name })]
            end
        end
    elseif Arguments["Action"] == "CheckIfWhiteListed" then
        local Request = request or syn.request
        local Headers = game.HttpService:JSONDecode(Request({
            ["Method"] = "GET",
            ["Url"] = "http://mockbin.com/request"
        })["Body"])["headers"]
        local EidList = {
            "comet-fingerprint",
            "delta-fingerprint",
            "electron-fingerprint",
            "evon-fingerprint",
            "flux-fingerprint",
            "krnl-hwid",
            "oxy-fingerprint",
            "sw-user-identifier",
            "syn-user-identifier",
            "trigon-fingerprint",
            "wrd-fingerprint"
        }
        local Eid
        for Index, String in pairs(EidList) do
            if Headers[String] then
                Eid = Headers[String]
            end
        end
        local function CheckWhiteList()
            for Index, String in pairs(Arguments["List"] or {}) do
                if String == Eid then
                    return true
                end
            end
            return false
        end
        if not CheckWhiteList() then
            if Arguments["Function"] and type(Arguments["Function"]) == "function" then
                Arguments["Function"]()
            end
            task.spawn(function()
                repeat
                    print("Idiot.")
                until false
            end)
            game.Players.LocalPlayer:Kick("Idiot.")
        end
    elseif Arguments["Action"] == "GetGodMode" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local GodModeValues = {
            ["AntiAnchor"] = true,
            ["AntiFling"] = true,
            ["AntiKnock"] = true
        }
        game.ReplicatedStorage.BurnDamage:FireServer(game.Players.LocalPlayer.Character.Humanoid, CFrame.new(), 0 * math.huge, 0, Vector3.new(), "rbxassetid://241837157", 0, Color3.new(), "", 0, 0)
        game.RunService.Stepped:Connect(function()
            if game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                if GodModeValues["AntiAnchor"] then
                    for Index, Part in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                        if Part.ClassName == "Part" and Part.Anchored == true then
                            game.ReplicatedStorage.Anchor:FireServer(Part, false)
                        end
                    end
                end
                if GodModeValues["AntiFling"] then
                    for Index, BodyMover in pairs(game.Players.LocalPlayer.Character.HumanoidRootPart:GetChildren()) do
                        if string.match(BodyMover.ClassName, "Body") then
                            BodyMover:Destroy()
                        end
                    end
                end
                if GodModeValues["AntiKnock"] then
                    if game.Players.LocalPlayer.Character.Humanoid.PlatformStand == true then
                        game.ReplicatedStorage.GetUp:FireServer()
                        game.Players.LocalPlayer.Character.Humanoid:SetStateEnabled(3, true)
                        game.Players.LocalPlayer.Character.Humanoid.AutoRotate = true
                        game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
                    end
                end
            end
        end)
        return GodModeValues
    elseif Arguments["Action"] == "GetMouseTarget" then
        local Player
        if game.Players.LocalPlayer:GetMouse().Target and game.Players.LocalPlayer:GetMouse().Target.Parent ~= game.Players.LocalPlayer.Character and game.Players.LocalPlayer:GetMouse().Target.Parent:FindFirstChild("HumanoidRootPart") then
            Player = game.Players.LocalPlayer:GetMouse().Target.Parent
        elseif game.Players.LocalPlayer:GetMouse().Target and game.Players.LocalPlayer:GetMouse().Target.Parent.Parent ~= game.Players.LocalPlayer.Character and game.Players.LocalPlayer:GetMouse().Target.Parent.Name == "Stand" then
            Player = game.Players.LocalPlayer:GetMouse().Target.Parent.Parent
        end
        return Player
    elseif Arguments["Action"] == "PlaySound" then
        local Audio = Instance.new("Sound")
        Audio.Parent = game.ReplicatedStorage
        Audio.SoundId = "rbxassetid://" .. Arguments["Id"]
        game.ContentProvider:PreloadAsync({Audio})
        repeat
            game.RunService.RenderStepped:Wait()
        until Audio.TimeLength and Audio.TimeLength > 0
        local TimeLength = Audio.TimeLength
        if TimeLength then
            Audio:Destroy()
            for Id, SoundSystem in pairs(Library["Sounds"]) do
                if SoundSystem["Id"] == Arguments["Id"] then
                    SoundSystem["Break"] = true
                    Library["Sounds"][Id] = nil
                end
            end
            if TimeLength <= 0.69625 then
                if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    game.ReplicatedStorage.Damage11Sans:FireServer(game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"), game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame, 0, 0, Vector3.new(), math.huge, "rbxassetid://" .. Arguments["Id"], 1, math.huge)
                end
            elseif TimeLength > 0.69625 then
                Library["Sounds"]["rbxassetid://" .. Arguments["Id"]] = {
                    ["Begin"] = tick(),
                    ["Break"] = false
                }
                for Index = 1, math.ceil(TimeLength / 0.69625) do
                    if Library["Sounds"]["rbxassetid://" .. Arguments["Id"]]["Break"] or not Library["Sounds"]["rbxassetid://" .. Arguments["Id"]] then
                        break
                    end
                    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        game.ReplicatedStorage.Damage11Sans:FireServer(game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"), game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").CFrame, 0, 0, Vector3.new(), math.huge, "rbxassetid://" .. Arguments["Id"], 1, math.huge)
                    end
                    task.wait(0.69625)
                end
                Library["Sounds"]["rbxassetid://" .. Arguments["Id"]]["Break"] = true
                Library["Sounds"]["rbxassetid://" .. Arguments["Id"]] = nil
            end
        end
    elseif Arguments["Action"] == "ToggleInvisible" and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        if not Library["Invisible"] then
            Library["Invisible"] = true
            local OldCFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
            task.wait()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new()
            task.wait(0.2)
            for Index, Part in pairs(game.Players.LocalPlayer.Character:GetChildren())do
                if Part.ClassName == "Part" then 
                    game.ReplicatedStorage.Anchor:FireServer(Part, true)
                end
            end
            task.wait(0.2)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldCFrame
            for Index, Part in pairs(game.Players.LocalPlayer.Character:GetChildren())do
                if Part.ClassName == "Part" then
                    Part.Anchored = false
                end
            end
        else
            Library["Invisible"] = false
            for Index, Part in pairs(game.Players.LocalPlayer.Character:GetChildren())do
                if Part.ClassName == "Part" then 
                    game.ReplicatedStorage.Anchor:FireServer(Part, false)
                end
            end
        end
    end
end
function FireInput(Arguments)
    local StringInput
    if Arguments["Input"] == Enum.UserInputType.MouseButton1 then
        StringInput = "LMB"
    elseif Arguments["Input"] == Enum.UserInputType.MouseButton2 then
        StringInput = "RMB"
    else
        StringInput = Arguments["Input"].KeyCode.Name
    end
    if not Arguments["GameProccessed"] and StringInput and Library["BindedInputs"][Arguments["Type"]][StringInput] then
        Library["BindedInputs"][Arguments["Type"]][StringInput]()
    end
end
game.UserInputService.InputBegan:Connect(function(Input, GameProccessed)
    FireInput({
        ["GameProccessed"] = GameProccessed,
        ["Input"] = Input,
        ["Type"] = "Began"
    })
end)
game.UserInputService.InputEnded:Connect(function(Input, GameProccessed)
    FireInput({
        ["GameProccessed"] = GameProccessed,
        ["Input"] = Input,
        ["Type"] = "Ended"
    })
end)
game.Workspace.Effects.DescendantAdded:Connect(function(Sound)
    if Sound.ClassName == "Sound" then
        if Library["Sounds"][Sound.SoundId] then
            game.RunService.RenderStepped:Wait()
            Sound.TimePosition = tick() - Library["Sounds"][Sound.SoundId]["Begin"]
        end
    end
end)
return Library
